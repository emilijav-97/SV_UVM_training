Structs :

    - strictly static objects
    - A structure represents a collection of data types that can be referenced as a whole, or the individual data
       types that make up the structure can be referenced by name
    - By default, structures are unpacked, meaning that there is an implementation-dependent packing of the data types.
    - Unpacked structures can contain any data type
    - A packed structure can be used with a typedef. 
    - A structure can be assigned as a whole and passed to or from a subroutine as a whole.
    - Members of a structure data type can be assigned individual default member values by using an initial
       assignment with the declaration of each member. The assigned expression shall be a constant expression.

Classes :

    - are dynamic, their declaration does not create the object.
    - Class instances, or objects, can be passed around via object handles, which provides a safe-pointer capability.
    - A class defines a data type. An object is an instance of that class. An object is used by first declaring a
       variable of that class type (that holds an object handle) and then creating an object of that class (using the
       new function) and assigning it to the variable.
    - SystemVerilog objects are implemented using handles, thereby providing C-like pointer functionality, but SystemVerilog 
       disallows casting handles onto other data types; thus, SystemVerilog handles do not have the risks associated with C pointers.
    - SystemVerilog objects form the basis of an Object-Oriented data abstraction that provides true
       polymorphism. Class inheritance, abstract classes, and dynamic casting are powerful mechanisms,
       which go way beyond the mere encapsulation mechanism provided by structs.

***
Typedef: 

    - allows users to create their own names for type definitions that they will use frequently in their code.
       Typedefs can be very convenient when building up complicated array definitions.
    - A typedefis used to provide a forward declaration of the class.
       In some cases, the class needs to be instantiated before the class declaration. 
       In these kinds of situations, the typedef is used to provide a forward declaration of the class.

***


